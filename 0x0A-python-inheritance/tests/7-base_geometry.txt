How to use 7-base_geometry.py

General usage

::

	>>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented

::

Testing bg.integer_validator()

1. Passing acceptable value

::

	>>> bg.integer_validator("mbuke", 4)

::

2. passing a negative

::

	>>> bg.integer_validator("mbuke", -4)
	Traceback (most recent call last):
	ValueError: mbuke must be greater than 0

::

3. passing other types apart from int

::

	>>> bg.integer_validator("mbuke", None)
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	>>> bg.integer_validator("mbuke", True)
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	>>> bg.integer_validator("mbuke", [1,2])
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	>>> bg.integer_validator("mbuke", {1,3})
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	>>> bg.integer_validator("mbuke", (1,))
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	>>> bg.integer_validator("mbuke", "3")
	Traceback (most recent call last):
	TypeError: mbuke must be an integer
	
::

4. not passing parameters
::

	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> bg.integer_validator("mbuke")
	Traceback (most recent call last):
	TypeError: integer_validator() missing 1 required positional argument: 'value'

::

5. passing zero as value

::

	>>> bg.integer_validator("mbuke", 0)
	Traceback (most recent call last):
	ValueError: mbuke must be greater than 0

::
